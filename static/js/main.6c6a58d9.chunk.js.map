{"version":3,"sources":["reportWebVitals.js","App.js","index.js"],"names":["reportWebVitals","App","words","setWords","useState","countDown","setCountDown","currInput","setCurrInput","currWordIndex","setCurrWordIndex","currCharIndex","setCurrCharIndex","currChar","setCurrChar","correct","setCorrect","incorrect","setIncorrect","status","setStatus","textInput","useRef","generateWords","Array","fill","map","randomWords","getCharClass","wordIdx","charIdx","char","length","useEffect","current","focus","className","ref","disabled","type","onKeyDown","keyCode","key","wordToCompare","trim","checkMatch","value","onChange","e","target","onClick","interval","setInterval","prevCountdown","clearInterval","word","i","split","idx","Math","round","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.6c6a58d9.chunk.js","sourcesContent":["const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useState, useEffect, useRef } from \"react\";\nimport randomWords from \"random-words\";\nimport \"./styles.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nconst NUMB_OF_WORDS = 100;\nconst SECONDS = 60;\nexport default function App() {\n  const [words, setWords] = useState([]);\n  const [countDown, setCountDown] = useState(SECONDS);\n  const [currInput, setCurrInput] = useState(\"\");\n  const [currWordIndex, setCurrWordIndex] = useState(0);\n  const [currCharIndex, setCurrCharIndex] = useState(-1);\n  const [currChar, setCurrChar] = useState(\"\");\n  const [correct, setCorrect] = useState(0);\n  const [incorrect, setIncorrect] = useState(0);\n  const [status, setStatus] = useState(\"waiting\");\n  const textInput = useRef(null);\n\n  useEffect(() => {\n    setWords(generateWords());\n  }, []);\n\n  useEffect(() => {\n    if (status === \"started\") {\n      textInput.current.focus();\n    }\n  }, [status]);\n\n  function generateWords() {\n    return new Array(NUMB_OF_WORDS).fill(null).map(() => randomWords());\n  }\n\n  function start() {\n    if (status === \"finished\") {\n      setWords(generateWords());\n      setCurrWordIndex(0);\n      setCorrect(0);\n      setIncorrect(0);\n      setCurrCharIndex(-1);\n      setCurrChar(\"\");\n    }\n\n    if (status !== \"started\") {\n      setStatus(\"started\");\n      let interval = setInterval(() => {\n        setCountDown((prevCountdown) => {\n          if (prevCountdown === 0) {\n            clearInterval(interval);\n            setStatus(\"finished\");\n            setCurrInput(\"\");\n            return SECONDS;\n          } else {\n            return prevCountdown - 1;\n          }\n        });\n      }, 1000);\n    }\n  }\n\n  function handleKeyDown({ keyCode, key }) {\n    if (keyCode === 32) {\n      checkMatch();\n      setCurrInput(\"\");\n      setCurrWordIndex(currWordIndex + 1);\n      setCurrCharIndex(-1);\n    } else if (keyCode === 8) {\n      setCurrCharIndex(currCharIndex - 1);\n      setCurrChar(\"\");\n    } else {\n      setCurrCharIndex(currCharIndex + 1);\n      setCurrChar(key);\n    }\n  }\n\n  function checkMatch() {\n    const wordToCompare = words[currWordIndex];\n    const doesItMatch = wordToCompare === currInput.trim();\n    if (doesItMatch) {\n      setCorrect(correct + 1);\n    } else {\n      setIncorrect(incorrect + 1);\n    }\n  }\n\n  function getCharClass(wordIdx, charIdx, char) {\n    if (\n      wordIdx === currWordIndex &&\n      charIdx === currCharIndex &&\n      currChar &&\n      status !== \"finished\"\n    ) {\n      if (char === currChar) {\n        return \"has-background-success\";\n      } else {\n        return \"has-background-danger\";\n      }\n    } else if (\n      wordIdx === currWordIndex &&\n      currCharIndex >= words[currWordIndex].length\n    ) {\n      return \"has-background-danger\";\n    } else {\n      return \"\";\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"section\">\n        <div className=\"is-size-1 has-text-centered has-text-primary\">\n          <h2>{countDown}</h2>\n        </div>\n      </div>\n      <div className=\"control is-expanded section\">\n        <input\n          ref={textInput}\n          disabled={status !== \"started\"}\n          type=\"text\"\n          className=\"input\"\n          onKeyDown={handleKeyDown}\n          value={currInput}\n          onChange={(e) => setCurrInput(e.target.value)}\n        />\n      </div>\n      <div className=\"section\">\n        <button className=\"button is-info is-fullwidth\" onClick={start}>\n          Start\n        </button>\n      </div>\n      {status === \"started\" && (\n        <div className=\"section\">\n          <div className=\"card\">\n            <div className=\"card-content\">\n              <div className=\"content\">\n                {words.map((word, i) => (\n                  <span key={i}>\n                    <span>\n                      {word.split(\"\").map((char, idx) => (\n                        <span className={getCharClass(i, idx, char)} key={idx}>\n                          {char}\n                        </span>\n                      ))}\n                    </span>\n                    <span> </span>\n                  </span>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n      {status === \"finished\" && (\n        <div className=\"section\">\n          <div className=\"columns\">\n            <div className=\"column has-text-centered\">\n              <p className=\"is-size-5\">Words per minute:</p>\n              <p className=\"has-text-primary is-size-1\">{correct}</p>\n            </div>\n            <div className=\"column has-text-centered\">\n              <p className=\"is-size-5\">Accuracy:</p>\n              {correct !== 0 ? (\n                <p className=\"has-text-info is-size-1\">\n                  {Math.round((correct / (correct + incorrect)) * 100)}%\n                </p>\n              ) : (\n                <p className=\"has-text-info is-size-1\">0%</p>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}