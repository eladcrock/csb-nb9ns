{"version":3,"sources":["App.js","index.js"],"names":["App","useState","words","setWords","countDown","setCountDown","currInput","setCurrInput","currWordIndex","setCurrWordIndex","currCharIndex","setCurrCharIndex","currChar","setCurrChar","correct","setCorrect","incorrect","setIncorrect","status","setStatus","textInput","useRef","generateWords","Array","fill","map","randomWords","getCharClass","wordIdx","charIdx","char","length","useEffect","current","focus","className","ref","disabled","type","placeholder","onKeyDown","keyCode","key","trim","value","onChange","e","target","onClick","interval","setInterval","prevCountdown","clearInterval","word","i","split","idx","Math","round","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.1cd75b4a.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\nimport randomWords from \"random-words\";\nimport \"./styles.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"bulma/css/bulma.min.css\";\n\nconst NUMB_OF_WORDS = 100;\nconst SECONDS = 60;\nexport default function App() {\n  const [words, setWords] = useState([]);\n  const [countDown, setCountDown] = useState(SECONDS);\n  const [currInput, setCurrInput] = useState(\"\");\n  const [currWordIndex, setCurrWordIndex] = useState(0);\n  const [currCharIndex, setCurrCharIndex] = useState(-1);\n  const [currChar, setCurrChar] = useState(\"\");\n  const [correct, setCorrect] = useState(0);\n  const [incorrect, setIncorrect] = useState(0);\n  const [status, setStatus] = useState(\"waiting\");\n  const textInput = useRef(null);\n\n  useEffect(() => {\n    setWords(generateWords());\n  }, []);\n\n  useEffect(() => {\n    if (status === \"started\") {\n      textInput.current.focus();\n    }\n  }, [status]);\n\n  function generateWords() {\n    return new Array(NUMB_OF_WORDS).fill(null).map(() => randomWords());\n  }\n\n  function start() {\n    if (status === \"finished\") {\n      setWords(generateWords());\n      setCurrWordIndex(0);\n      setCorrect(0);\n      setIncorrect(0);\n      setCurrCharIndex(-1);\n      setCurrChar(\"\");\n    }\n\n    if (status !== \"started\") {\n      setStatus(\"started\");\n      let interval = setInterval(() => {\n        setCountDown((prevCountdown) => {\n          if (prevCountdown === 0) {\n            clearInterval(interval);\n            setStatus(\"finished\");\n            setCurrInput(\"\");\n            return SECONDS;\n          } else {\n            return prevCountdown - 1;\n          }\n        });\n      }, 1000);\n    }\n  }\n\n  function handleKeyDown({ keyCode, key }) {\n    if (keyCode === 32) {\n      checkMatch();\n      setCurrInput(\"\");\n      setCurrWordIndex(currWordIndex + 1);\n      setCurrCharIndex(-1);\n    } else if (keyCode === 8) {\n      setCurrCharIndex(currCharIndex - 1);\n      setCurrChar(\"\");\n    } else {\n      setCurrCharIndex(currCharIndex + 1);\n      setCurrChar(key);\n    }\n  }\n\n  function checkMatch() {\n    const wordToCompare = words[currWordIndex];\n    const doesItMatch = wordToCompare === currInput.trim();\n    if (doesItMatch) {\n      setCorrect(correct + 1);\n    } else {\n      setIncorrect(incorrect + 1);\n    }\n  }\n\n  function getCharClass(wordIdx, charIdx, char) {\n    if (\n      wordIdx === currWordIndex &&\n      charIdx === currCharIndex &&\n      currChar &&\n      status !== \"finished\"\n    ) {\n      if (char === currChar) {\n        return \"has-background-success\";\n      } else {\n        return \"has-background-danger\";\n      }\n    } else if (\n      wordIdx === currWordIndex &&\n      currCharIndex >= words[currWordIndex].length\n    ) {\n      return \"has-background-danger\";\n    } else {\n      return \"\";\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"body\">\n        <div className=\"section\">\n          <div className=\"is-size-1 has-text-centered has-text-primary\">\n            <br />\n            <h2 className=\"count\">{countDown}</h2>\n          </div>\n        </div>\n        <div className=\"control is-expanded section\">\n          <input\n            ref={textInput}\n            disabled={status !== \"started\"}\n            type=\"text\"\n            placeholder=\"         Test Your Typing !  \"\n            className=\"input\"\n            onKeyDown={handleKeyDown}\n            value={currInput}\n            onChange={(e) => setCurrInput(e.target.value)}\n          />\n        </div>\n        <div className=\"section\">\n          <button className=\"button is-info is-fullwidth\" onClick={start}>\n            Start ðŸ’¬\n          </button>\n        </div>\n        {status === \"started\" && (\n          <div className=\"section\">\n            <div className=\"card\">\n              <div className=\"card-content\">\n                <div className=\"content\">\n                  {words.map((word, i) => (\n                    <span key={i}>\n                      <span>\n                        {word.split(\"\").map((char, idx) => (\n                          <span\n                            className={getCharClass(i, idx, char)}\n                            key={idx}\n                          >\n                            {char}\n                          </span>\n                        ))}\n                      </span>\n                      <span> </span>\n                    </span>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n        {status === \"finished\" && (\n          <div className=\"section\">\n            <div className=\"columns\">\n              <div className=\"column has-text-centered\">\n                <p className=\"is-size-5\">\n                  <h4>Words per minute:</h4>\n                </p>\n                <p className=\"has-text-primary is-size-1\">\n                  <h4>{correct}</h4>\n                </p>\n              </div>\n              <div className=\"column has-text-centered\">\n                <p className=\"is-size-5\">\n                  <h4>Accuracy: </h4>\n                </p>\n                {correct !== 0 ? (\n                  <p className=\"has-text-info is-size-1\">\n                    <h4>\n                      {Math.round((correct / (correct + incorrect)) * 100)}%\n                    </h4>\n                  </p>\n                ) : (\n                  <p className=\"has-text-info is-size-1\">0%</p>\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}